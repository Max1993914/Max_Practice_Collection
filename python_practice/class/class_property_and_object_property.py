# -*- coding: utf-8 -*-

"""
类属性与实例属性
区别：实例属性归每个实例所有，互不干涉；类属性归类所有，所有实例共享
"""


# ------------------------------------------------------------------------------------------
# 给实例绑定属性的方法是通过实例变量或者self变量
# ------------------------------------------------------------------------------------------
class A(object):

    def __init__(self, name):
        self.name = name


a = A("Max")
a.score = 20  # 动态添加属性score


# ------------------------------------------------------------------------------------------
# 除此之外，还可以给类绑定属性，这种属性归类所有，而不是对象
# ------------------------------------------------------------------------------------------
class B(object):
    name = "Bob"


b = B()
print(b.name)  # 打印name属性，由于实例没有name属性，将会查找类属性，显示Bob
print(B.name)  # 打印name属性，由于实例没有name属性，将会查找类属性，显示Bob
b.name = "Lala"  # 注意，这里等于是给实例添加了一个name属性
print(b.name)  # 打印name属性，由于实例有同名属性，而实例属性比类属性优先级高，所以覆盖掉了类属性。显示Lala
del b.name  # 删除实例属性
print(b.name)

# 尽量不要给实例属性和类属性起相同的名字，因为当取用时实例属性会覆盖类属性。如果删除实例属性再取，很可能取到一个不一样的值，造成难以发现的错误。


# ------------------------------------------------------------------------------------------
# 还有一个用法：可以把类属性作为值传递给初始化函数。
# ------------------------------------------------------------------------------------------
class Father(object):

    color = "red"

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def scold(self):
        print("$%#^&$#@$!$@")


class Son(Father):

    name = "小宝"

    def __init__(self, height, age):
        self.height = height
        super(Son, self).__init__(self.name, age)  # 这里的self.name 就是"小宝"


s = Son(200, 10)
print(s.name)
