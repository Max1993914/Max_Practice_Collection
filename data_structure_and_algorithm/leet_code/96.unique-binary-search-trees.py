"""
给定一个正整数n，求1-n这些数能组成的二叉搜索树的数量有多少？

思路：动态规划
状态定义：G(n): 长度为n的一组数，二叉搜索树的数量是多少
F(i, n): 以i为根，长度为n的一组数，二叉搜索树的数量是多少

G(n) = F(1, n) + F(2, n) ... F(n, n)  // 遍历各个点，每一个点作为根节点的二叉搜索树数量之和/
F(i, n) = G(i-1) * G(n-i)   // 以i为根节点，左边排列情况之和*右边排列情况之和
所以:
G(n) = G(1-1) * G(n-1) + G(2-1) * G(n-2) ...
边界条件：
G(0) = 1
G(1) = 1
"""


def num_trees(n):
    G = [0] * (n + 1)
    G[0] = 1
    G[1] = 1
    for i in range(2, n + 1):
        for j in range(1, i + 1):
            G[i] = G[i] + G[j - 1] * G[i - j]
    return G[n]